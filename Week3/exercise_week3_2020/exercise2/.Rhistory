}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(nu=4,s=1);
y ~ normal(mu,sqrt(sigma));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
censored_observations_model="
data{
real<lower=0> y;
}
parameters{
real<lower = 0> mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
censored_observations_model="
data{
real<lower=0> y;
}
parameters{
real<lower = 0> mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
y
length(y)
censored_observations_model="
data{
real<lower=0> y[66];
}
parameters{
real<lower = 0> mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
censored_observations_model="
data{
real<lower=0> y[66];
}
parameters{
real mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
censored_observations_model="
data{
real<lower=0> y[66];
}
parameters{
real mu;
real sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
censored_observations_model="
data{
real<lower=0> y[66];
}
parameters{
real mu;
real sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ log_sum_exp(normal_lpdf(mu,sqrt(sigma2)) );
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
censored_observations_model="
data{
real<lower=0> y[66];
}
parameters{
real mu;
real sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ log_sum_exp(normal_lpdf(y|mu,sqrt(sigma2)) );
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
censored_observations_model="
data{
real<lower=0> y[66];
}
parameters{
real mu;
real sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
censored_observations_model="
data{
real<lower=0> y[66];
}
parameters{
real mu;
real sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
censored_observations_model="
data{
real y[66];
}
parameters{
real mu;
real sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
# visual inspection
plot(post, plotfun= "trace", pars ="y", inc_warmup = TRUE)
# visual inspection
plot(post, plotfun= "trace", pars ="y", inc_warmup = TRUE)
# Inspection with PSRF=Rhat
print(post,pars="y")
# visual inspection
plot(post, plotfun= "trace", pars ="sigma2", inc_warmup = TRUE)
censored_observations_model="
data{
real y[66];
}
parameters{
real mu;
real sigma2;
}
model{
mu ~ normal(0,1000);
y ~ normal(mu,sqrt(sigma2));
sigma2 ~ scaled_inv_chi_square(4,1);
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
# visual inspection
plot(post, plotfun= "trace", pars ="y", inc_warmup = TRUE)
censored_observations_model="
data{
real<lower = 0> y[66];
}
parameters{
real mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
model="
data{
#real<lower = 0> y[66];
}
parameters{
real mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
#y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
model="
data{
real<lower = 0> y[66];
}
parameters{
real mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
y = read.table("ex_speedOfLight.dat" , header=TRUE)
y = as.vector(y$y)
y
model="
data{
real<lower = 0> y[66];
}
parameters{
real mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
model="
data{
real<lower = 0> vector[66] y;
}
parameters{
real mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
model="
data{
vector[66] y;
}
parameters{
real mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=censored_observations_model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
model="
data{
vector[66] y;
}
parameters{
real mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
model="
data{
vector[66] y;
}
parameters{
real mu;
real<lower = 0> sigma2;
}
model{
mu ~ normal(0,1000);
sigma2 ~ scaled_inv_chi_square(4,1);
y ~ normal(mu,sqrt(sigma2));
}
"
dataset <- list("y"=y)
#give initial values for all chains for parameter theta
init1 <- list (y = 100)
init2 <- list (y = 50)
init3 <- list (y = 200)
inits <- list(init1, init2, init3)
# stan function does all of the work of fitting a Stan model and
# returning the results as an instance of stanfit = post in our exercises.
post=stan(model_code=model,data=dataset,init=inits,
warmup=500,iter=1000,chains=3,thin=1)
# Compared summary statistics for different chains
summary(post,pars="sigma2")
summary(post,pars="mu")
# take samples of lambda into a vector
muSamp=as.matrix(post, pars ="mu")
mean(muSamp)
var(muSamp)
var(muSamp)
mean(muSamp)
var(muSamp)
ySamp=as.matrix(post, pars ="y")
summary(post,pars="mu")
# Compared summary statistics for different chains
summary(post,pars="sigma2")
